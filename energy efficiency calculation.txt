from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Read CSV data without pandas
def read_csv_data(filename):
    with open(filename, 'r') as f:
        lines = f.readlines()
    header = lines[0].strip().split(',')
    data = [list(map(float, line.strip().split(','))) for line in lines[1:]]
    return header, data

# Load data
header, data = read_csv_data('energy_data.csv')

# Separate features and target
X = [row[:-1] for row in data]  # first 8 columns
y = [row[-1] for row in data]  # last column (Heating Load)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluate
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))

# Visualization
plt.scatter(y_test, y_pred, c='green')
plt.xlabel("Actual Heating Load")
plt.ylabel("Predicted Heating Load")
plt.title("Actual vs Predicted")
plt.grid(True)
plt.show()

# Optimization Suggestion: Modify sample input and re-predict
print("\n=== Optimization Suggestion ===")
sample = X_test[0].copy()
print("Original Prediction:", model.predict([sample])[0])

# Suggest reducing glazing area
sample[6] = sample[6] * 0.7  # Glazing Area reduced by 30%
print("Prediction after reducing glazing area:", model.predict([sample])[0])